
- name: poweroff vm
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: no
    name: "{{ inventory_hostname }}"
    uuid: "{{ hostvars[inventory_hostname].config.uuid }}"
    state: poweredoff
  delegate_to: 127.0.0.1
  async: 7200
  poll: 0
  register: poweroff
  with_items: "{{ nodes }}"
  when: (nodes is defined) and (item.name in inventory_hostname) and (hostvars[inventory_hostname].config.uuid is defined)

- name: Wait for systems to poweroff
  async_status: jid="{{ item.ansible_job_id }}"
  register: systems
  until: systems.finished
  retries: 300
  delay: 10
  with_items: "{{ poweroff.results }}"
  when: (nodes is defined) and (item.name in inventory_hostname)

- name: delete vm
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: no
    name: "{{ inventory_hostname }}"
    uuid: "{{ hostvars[inventory_hostname].config.uuid }}"
    state: absent
  delegate_to: 127.0.0.1
  when: (systems | changed) and (item.systems is defined) and (nodes is defined) and (item.name in inventory_hostname) and (hostvars[inventory_hostname].config.uuid is defined)




